--- a/drivers/phy/Kconfig
+++ b/drivers/phy/Kconfig
@@ -239,6 +239,11 @@ config PHY_XGENE
 	help
 	  This option enables support for APM X-Gene SoC multi-purpose PHY.
 
+config PHY_RALINK_USB
+	tristate "Ralink USB PHY driver"
+	select GENERIC_PHY
+	depends on RALINK
+
 config PHY_STIH407_USB
 	tristate "STMicroelectronics USB2 picoPHY driver for STiH407 family"
 	depends on RESET_CONTROLLER
--- a/drivers/phy/Makefile
+++ b/drivers/phy/Makefile
@@ -31,3 +31,4 @@ obj-$(CONFIG_PHY_ST_SPEAR1340_MIPHY)	+=
 obj-$(CONFIG_PHY_XGENE)			+= phy-xgene.o
 obj-$(CONFIG_PHY_STIH407_USB)		+= phy-stih407-usb.o
 obj-$(CONFIG_PHY_STIH41X_USB)		+= phy-stih41x-usb.o
+obj-$(CONFIG_PHY_RALINK_USB)		+= phy-ralink-usb.o
--- /dev/null
+++ b/drivers/phy/phy-ralink-usb.c
@@ -0,0 +1,366 @@
+/*
+ * Allwinner ralink USB phy driver
+ *
+ * Copyright (C) 2014 John Crispin <blogic@openwrt.org>
+ *
+ * Based on code from
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/phy/phy.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+#include <linux/of_platform.h>
+
+#include <asm/mach-ralink/ralink_regs.h>
+
+#define PHYS_TO_K1(physaddr)		KSEG1ADDR(physaddr)
+#define sysRegRead(phys)		(*(volatile unsigned int *)PHYS_TO_K1(phys))
+#define sysRegWrite(phys, val)		((*(volatile unsigned int *)PHYS_TO_K1(phys)) = (val))
+
+#define RALINK_SYSCTL_BASE		0xB0000000
+#define RALINK_USB_DEV_BASE		0xB0120000
+
+#define RALINK_UHST_RST			(1<<22)
+#define RALINK_UDEV_RST			(1<<25)
+
+#define RT_SYSC_REG_SYSCFG1		0x014
+#define RT_SYSC_REG_CLKCFG1		0x030
+#define RT_SYSC_REG_USB_PHY_CFG		0x05c
+
+#define RT_RSTCTRL_UDEV			BIT(25)
+#define RT_RSTCTRL_UHST			BIT(22)
+#define RT_SYSCFG1_USB0_HOST_MODE	BIT(10)
+
+#define MT7620_CLKCFG1_UPHY0_CLK_EN	BIT(25)
+#define MT7620_CLKCFG1_UPHY1_CLK_EN	BIT(22)
+#define RT_CLKCFG1_UPHY1_CLK_EN		BIT(20)
+#define RT_CLKCFG1_UPHY0_CLK_EN		BIT(18)
+
+#define USB_PHY_UTMI_8B60M		BIT(1)
+#define UDEV_WAKEUP			BIT(0)
+
+#define SYSCFG1_REG		(RALINK_SYSCTL_BASE + 0x14)
+#define RALINK_UHST_MODE	(1UL<<10)
+
+#define CLKCFG1_REG		(RALINK_SYSCTL_BASE + 0x30)
+#define RSTCTRL_REG		(RALINK_SYSCTL_BASE + 0x34)
+
+#define RALINK_UPHY0_CLK_EN		(1<<25)
+#define RALINK_UPHY1_CLK_EN		(1<<22)
+
+static atomic_t rt3xxx_power_instance = ATOMIC_INIT(0);
+static atomic_t uphy_init_instance = ATOMIC_INIT(0);
+static struct reset_control *rstdev;
+static struct reset_control *rsthost;
+static u32 phy_clk;
+static struct phy *rt_phy;
+
+#define REG_SIFSLV_FM_FEG_FMCR0		(ADDR_SIFSLV_FM_FEG_BASE+0x00)
+#define REG_SIFSLV_FM_FEG_FMCR1		(ADDR_SIFSLV_FM_FEG_BASE+0x04)
+#define REG_SIFSLV_FM_FEG_FMCR2		(ADDR_SIFSLV_FM_FEG_BASE+0x08)
+#define REG_SIFSLV_FM_FEG_FMMONR0	(ADDR_SIFSLV_FM_FEG_BASE+0x0C)
+#define REG_SIFSLV_FM_FEG_FMMONR1	(ADDR_SIFSLV_FM_FEG_BASE+0x10)
+
+/* SIFSLV_FM_FEG_FMCR0 */
+#define RG_LOCKTH			(0xf<<28)
+#define RG_MONCLK_SEL			(0x3<<26)
+#define RG_FM_MODE			(0x1<<25)
+#define RG_FREQDET_EN			(0x1<<24)
+#define RG_CYCLECNT			(0x00ffffff)
+
+/* SIFSLV_FM_FEG_FMMONR1 */
+#define RG_MONCLK_SEL_3			(0x1<<9)
+#define RG_FRCK_EN			(0x1<<8)
+#define USBPLL_LOCK			(0x1<<1)
+#define USB_FM_VLD			(0x1<<0)
+
+#define OFS_U2_PHY_AC0			0x00
+#define OFS_U2_PHY_AC1			0x04
+#define OFS_U2_PHY_AC2			0x08
+#define OFS_U2_PHY_ACR0			0x10
+#define OFS_U2_PHY_ACR1			0x14
+#define OFS_U2_PHY_ACR2			0x18
+#define OFS_U2_PHY_ACR3			0x1C
+#define OFS_U2_PHY_ACR4			0x20
+#define OFS_U2_PHY_AMON0		0x24
+#define OFS_U2_PHY_DCR0			0x60
+#define OFS_U2_PHY_DCR1			0x64
+#define OFS_U2_PHY_DTM0			0x68
+#define OFS_U2_PHY_DTM1			0x6C
+
+/* U2_PHY_ACR0 */
+#define RG_USB20_ICUSB_EN		(0x1<<24)
+#define RG_USB20_HSTX_SRCAL_EN		(0x1<<23)
+#define RG_USB20_HSTX_SRCTRL		(0x7<<16)
+#define RG_USB20_LS_CR			(0x7<<12)
+#define RG_USB20_FS_CR			(0x7<<8)
+#define RG_USB20_LS_SR			(0x7<<4)
+#define RG_USB20_FS_SR			(0x7<<0)
+
+#define ADDR_SIFSLV_FM_FEG_BASE		(RALINK_USB_DEV_BASE+0xf00)
+#define ADDR_U2_PHY_P0_BASE		(RALINK_USB_DEV_BASE+0x800)
+#define U2_SR_COEFF			32
+
+static void
+u2_slew_rate_calibration(int port_id, u32 u2_phy_reg_base)
+{
+	int i;
+	u32 reg_val;
+	u32 u4FmOut = 0;
+
+	// => RG_USB20_HSTX_SRCAL_EN = 1
+	// enable HS TX SR calibration
+	reg_val = sysRegRead(u2_phy_reg_base + OFS_U2_PHY_ACR0);
+	reg_val |= RG_USB20_HSTX_SRCAL_EN;
+	sysRegWrite(u2_phy_reg_base + OFS_U2_PHY_ACR0, reg_val);
+	msleep(1);
+
+	// => RG_FRCK_EN = 1
+	// Enable free run clock
+	reg_val = sysRegRead(REG_SIFSLV_FM_FEG_FMMONR1);
+	reg_val |= RG_FRCK_EN;
+	sysRegWrite(REG_SIFSLV_FM_FEG_FMMONR1, reg_val);
+
+	// MT6290 HS signal quality patch
+	// => RG_CYCLECNT = 400
+	// Setting cyclecnt = 400
+	reg_val = sysRegRead(REG_SIFSLV_FM_FEG_FMCR0);
+	reg_val &= ~RG_CYCLECNT;
+	reg_val |= 0x400;
+	sysRegWrite(REG_SIFSLV_FM_FEG_FMCR0, reg_val);
+
+	// => RG_FREQDET_EN = 1
+	// Enable frequency meter
+	reg_val = sysRegRead(REG_SIFSLV_FM_FEG_FMCR0);
+	reg_val |= RG_FREQDET_EN;
+	sysRegWrite(REG_SIFSLV_FM_FEG_FMCR0, reg_val);
+
+	// wait for FM detection done, set 10ms timeout
+	for (i = 0; i < 10; i++) {
+		// => u4FmOut = USB_FM_OUT
+		// read FM_OUT
+		u4FmOut = sysRegRead(REG_SIFSLV_FM_FEG_FMMONR0);
+		
+		// check if FM detection done
+		if (u4FmOut != 0)
+			break;
+		
+		msleep(1);
+	}
+
+	// => RG_FREQDET_EN = 0
+	// disable frequency meter
+	reg_val = sysRegRead(REG_SIFSLV_FM_FEG_FMCR0);
+	reg_val &= ~RG_FREQDET_EN;
+	sysRegWrite(REG_SIFSLV_FM_FEG_FMCR0, reg_val);
+
+	// => RG_FRCK_EN = 0
+	// disable free run clock
+	reg_val = sysRegRead(REG_SIFSLV_FM_FEG_FMMONR1);
+	reg_val &= ~RG_FRCK_EN;
+	sysRegWrite(REG_SIFSLV_FM_FEG_FMMONR1, reg_val);
+
+	// => RG_USB20_HSTX_SRCAL_EN = 0
+	// disable HS TX SR calibration
+	reg_val = sysRegRead(u2_phy_reg_base + OFS_U2_PHY_ACR0);
+	reg_val &= ~RG_USB20_HSTX_SRCAL_EN;
+	sysRegWrite(u2_phy_reg_base + OFS_U2_PHY_ACR0, reg_val);
+	msleep(1);
+
+	// => RG_USB20_HSTX_SRCTRL
+	reg_val = sysRegRead(u2_phy_reg_base + OFS_U2_PHY_ACR0);
+	reg_val &= ~RG_USB20_HSTX_SRCTRL;
+	if (u4FmOut != 0) {
+		// set reg = (1024/FM_OUT) * 25 * 0.028 (round to the nearest digits)
+		u32 u4Tmp = (((1024 * 25 * U2_SR_COEFF) / u4FmOut) + 500) / 1000;
+		reg_val |= ((u4Tmp & 0x07)<<16);
+		printk("U2PHY P%d set SRCTRL %s value: %d\n", port_id, "calibration", u4Tmp);
+	} else {
+		reg_val |= (0x4<<16);
+		printk("U2PHY P%d set SRCTRL %s value: %d\n", port_id, "default", 4);
+	}
+	sysRegWrite(u2_phy_reg_base + OFS_U2_PHY_ACR0, reg_val);
+}
+
+static int ralink_usb_phy_init(struct phy *_phy)
+{
+	return 0;
+}
+
+static int ralink_usb_phy_exit(struct phy *_phy)
+{
+	return 0;
+}
+
+static void
+u2_phy_init(void)
+{
+	u32 reg_val;
+
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_AC2);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_ACR0);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0);
+
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0, 0x00ffff02);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0, 0x00555502);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0, 0x00aaaa02);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0, 0x00000402);
+	reg_val = sysRegRead(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DCR0);
+
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_AC0, 0x0048086a);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_AC1, 0x4400001c);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_ACR3, 0xc0200000);
+	sysRegWrite(ADDR_U2_PHY_P0_BASE + OFS_U2_PHY_DTM0, 0x02000000);
+}
+
+void
+uphy_init(void)
+{
+	if (atomic_inc_return(&uphy_init_instance) != 1)
+		return;
+
+	u2_phy_init();
+	u2_slew_rate_calibration(0, ADDR_U2_PHY_P0_BASE);
+}
+
+static void rt_usb_wake_up(void)
+{
+	u32 val;
+
+	/* enable PHY0/1 clock */
+	val = le32_to_cpu(*(volatile u32 *)(CLKCFG1_REG));
+	val |= (RALINK_UPHY0_CLK_EN | RALINK_UPHY1_CLK_EN);
+	*(volatile u32 *)(CLKCFG1_REG) = cpu_to_le32(val);
+
+	mdelay(10);
+
+	/* set HOST mode */
+	val = le32_to_cpu(*(volatile u32 *)(SYSCFG1_REG));
+	val |=  (RALINK_UHST_MODE);
+	*(volatile u32 *)(SYSCFG1_REG) = cpu_to_le32(val);
+
+	mdelay(1);
+
+	/* release reset */
+	val = le32_to_cpu(*(volatile u32 *)(RSTCTRL_REG));
+	val &= ~(RALINK_UHST_RST | RALINK_UDEV_RST);
+	*(volatile u32 *)(RSTCTRL_REG) = cpu_to_le32(val);
+
+	mdelay(100);
+
+	uphy_init();
+}
+
+static void rt_usb_sleep(void)
+{
+	u32 val;
+
+	/* raise reset */
+	val = le32_to_cpu(*(volatile u32 *)(RSTCTRL_REG));
+	val |= (RALINK_UHST_RST | RALINK_UDEV_RST);
+	*(volatile u32 *)(RSTCTRL_REG) = cpu_to_le32(val);
+
+	mdelay(10);
+
+	/* disable PHY0/1 clock */
+	val = le32_to_cpu(*(volatile u32 *)(CLKCFG1_REG));
+	val &= ~(RALINK_UPHY0_CLK_EN | RALINK_UPHY1_CLK_EN);
+	*(volatile u32 *)(CLKCFG1_REG) = cpu_to_le32(val);
+
+	udelay(10);
+}
+
+static int ralink_usb_phy_power_on(struct phy *_phy)
+{
+	if (atomic_inc_return(&rt3xxx_power_instance) == 1)
+		rt_usb_wake_up();
+
+	return 0;
+}
+
+static int ralink_usb_phy_power_off(struct phy *_phy)
+{
+	if (atomic_dec_return(&rt3xxx_power_instance) == 0)
+		rt_usb_sleep();
+
+	return 0;
+}
+
+static struct phy_ops ralink_usb_phy_ops = {
+	.init		= ralink_usb_phy_init,
+	.exit		= ralink_usb_phy_exit,
+	.power_on	= ralink_usb_phy_power_on,
+	.power_off	= ralink_usb_phy_power_off,
+	.owner		= THIS_MODULE,
+};
+
+static struct phy *ralink_usb_phy_xlate(struct device *dev,
+					struct of_phandle_args *args)
+{
+	return rt_phy;
+}
+
+static const struct of_device_id ralink_usb_phy_of_match[] = {
+	{ .compatible = "ralink,rt3xxx-usbphy", .data = (void *) (RT_CLKCFG1_UPHY1_CLK_EN | RT_CLKCFG1_UPHY0_CLK_EN) },
+	{ .compatible = "ralink,mt7620a-usbphy", .data = (void *) (MT7620_CLKCFG1_UPHY1_CLK_EN | MT7620_CLKCFG1_UPHY0_CLK_EN) },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ralink_usb_phy_of_match);
+
+static int ralink_usb_phy_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct phy_provider *phy_provider;
+	const struct of_device_id *match;
+
+	printk("%s:%s[%d]\n", __FILE__, __func__, __LINE__);
+	match = of_match_device(ralink_usb_phy_of_match, &pdev->dev);
+	phy_clk = (int) match->data;
+
+	rsthost = devm_reset_control_get(&pdev->dev, "host");
+	rstdev = devm_reset_control_get(&pdev->dev, "device");
+
+	rt_phy = devm_phy_create(dev, NULL, &ralink_usb_phy_ops, NULL);
+	if (IS_ERR(rt_phy)) {
+		dev_err(dev, "failed to create PHY\n");
+		return PTR_ERR(rt_phy);
+	}
+
+	phy_provider = devm_of_phy_provider_register(dev, ralink_usb_phy_xlate);
+printk("%s:%s[%d]\n", __FILE__, __func__, __LINE__);
+
+	return PTR_ERR_OR_ZERO(phy_provider);
+}
+
+static struct platform_driver ralink_usb_phy_driver = {
+	.probe	= ralink_usb_phy_probe,
+	.driver = {
+		.of_match_table	= ralink_usb_phy_of_match,
+		.name  = "ralink-usb-phy",
+	}
+};
+module_platform_driver(ralink_usb_phy_driver);
+
+MODULE_DESCRIPTION("Ralink USB phy driver");
+MODULE_AUTHOR("John Crispin <blogic@openwrt.org>");
+MODULE_LICENSE("GPL v2");
